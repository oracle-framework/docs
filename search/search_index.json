{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the oracle framework docs!","text":"<p>Welcome to the oracle framework docs!</p> <p>Discover how oracle framework empowers you to create AI-powered social media agents with unique personalities. This comprehensive guide provides step-by-step instructions, best practices, and expert insights to help you harness the full potential of oracle framework.</p> <p>You'll find resources to help you:</p> <ul> <li>Define your agent's personality, behavior, and knowledge base</li> <li>Integrate with popular platforms like Twitter, Telegram, and Discord</li> <li>Configure and deploy your agent using various LLM providers</li> <li>Monitor and optimize your agent's performance and user engagement</li> </ul> <p>Whether you're a developer, marketer, or AI enthusiast, these docs are your go-to resource for building captivating AI experiences.</p>"},{"location":"community/important-links/","title":"Important Links","text":"<ul> <li> <p>Website</p> </li> <li> <p>GitHub</p> </li> <li> <p>Twitter</p> </li> <li> <p>Discord</p> </li> <li> <p>Telegram </p> </li> </ul>"},{"location":"community/next-steps/","title":"Next Steps and Getting Involved","text":"<p>Now that you have a solid foundation in oracle framework, it's time to put your knowledge into practice and start building your own AI agents. Here are some next steps:</p> <ul> <li> <p>Join the oracle framework community and engage with other developers to share ideas, ask questions, and collaborate on projects.</p> </li> <li> <p>Experiment with different agent personalities, behaviors, and platform integrations to explore the possibilities of AI-driven social media interactions.</p> </li> <li> <p>Contribute to the oracle framework codebase by submitting bug fixes, feature enhancements, or documentation improvements via pull requests on GitHub.</p> </li> <li> <p>Share your experiences, successes, and lessons learned with the community to inspire and help others on their oracle framework journey.</p> </li> </ul> <p>Remember, the power of oracle framework lies in its community and the collective efforts of developers like you. By actively participating and contributing, you can shape the future of AI-driven social media interactions and unlock new possibilities for engaging and empowering users across platforms. </p>"},{"location":"community/support/","title":"Support","text":"<p>As you develop and deploy your oracle agent, you may encounter issues, have questions, or want to request new features. oracle framework provides various support channels to help you along the way.</p>"},{"location":"community/support/#issue-tracking-and-feature-requests","title":"Issue Tracking and Feature Requests","text":"<p>If you come across any bugs, issues, or have ideas for new features, the GitHub issue tracker is the primary place to report them. Follow these steps:</p> <ol> <li> <p>Visit the oracle framework GitHub repository: https://github.com/oracle-framework/oracle-framework</p> </li> <li> <p>Click on the \"Issues\" tab in the repository.</p> </li> <li> <p>Search for existing issues related to your problem or feature request.</p> </li> <li> <p>If no relevant issues are found, click on the \"New Issue\" button.</p> </li> <li> <p>Provide a clear and descriptive title for your issue.</p> </li> <li> <p>Fill out the issue template with detailed information about the problem or feature request, including steps to reproduce (if applicable).</p> </li> <li> <p>Submit the issue and engage with the maintainers and community for further discussion and updates.</p> </li> </ol> <p>The oracle framework maintainers actively monitor the issue tracker and will prioritize and address reported issues based on their severity and impact.</p>"},{"location":"community/support/#community-resources-and-forums","title":"Community Resources and Forums","text":"<p>In addition to the issue tracker, oracle framework has a growing community of developers and users who can provide support, share knowledge, and collaborate on ideas. Engage with the community through the following channels:</p> <ul> <li> <p>Discord</p> </li> <li> <p>Telegram</p> </li> <li> <p>Twitter </p> </li> </ul>"},{"location":"getting-started/key-features/","title":"Key Features and Benefits","text":"<p>oracle framework offers a range of features and benefits that make it an attractive choice for developers looking to create agents:</p>"},{"location":"getting-started/key-features/#streamlined-agent-creation","title":"Streamlined Agent Creation","text":"<ul> <li> <p>Quickly bootstrap agents using a simple, declarative configuration file</p> </li> <li> <p>Define an agent's personality, behavior, and knowledge base in a structured manner</p> </li> <li> <p>Easily start by modifying an included character that is already launched and live on all supported platforms</p> </li> </ul>"},{"location":"getting-started/key-features/#authentic-interaction","title":"Authentic Interaction","text":"<ul> <li> <p>Leverage advanced language models to generate human-like responses</p> </li> <li> <p>Maintain consistent tone, style, and context awareness across conversations</p> </li> <li> <p>Support for text, image, and voice content for rich, multi-modal interactions</p> </li> </ul>"},{"location":"getting-started/key-features/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":"<ul> <li> <p>Out-of-the-box support for popular platforms: Twitter, Telegram, and Discord</p> </li> <li> <p>Extensible architecture for integrating with additional social media services</p> </li> <li> <p>Seamless deployment and management of agents across multiple platforms</p> </li> </ul>"},{"location":"getting-started/key-features/#customization-and-flexibility","title":"Customization and Flexibility","text":"<ul> <li> <p>Fine-grained control over agent behavior, posting patterns, and interaction styles</p> </li> <li> <p>Supports any OpenAI compatible model or provider</p> </li> <li> <p>Open-source codebase for easy modification and extension</p> </li> </ul>"},{"location":"getting-started/key-features/#efficiency-and-scalability","title":"Efficiency and Scalability","text":"<ul> <li> <p>Abstracts away complexities of working with LLMs and social media APIs</p> </li> <li> <p>Built-in tools for auto-posting, reply handling, and user engagement</p> </li> <li> <p>Optimized for performance and scalability, supporting multiple concurrent agents</p> </li> </ul>"},{"location":"getting-started/key-features/#rapid-iteration-and-experimentation","title":"Rapid Iteration and Experimentation","text":"<ul> <li> <p>Modular architecture enables quick prototyping and testing of new features</p> </li> <li> <p>Comprehensive documentation and examples for easy onboarding</p> </li> <li> <p>Active community support and continuous development</p> </li> </ul> <p>By leveraging oracle framework, developers can focus on the creative aspects of building compelling AI personas while the framework handles the technical heavy lifting. This results in faster time-to-market, reduced development costs, and more engaging user experiences across social media platforms. </p>"},{"location":"getting-started/use-cases/","title":"Use Cases and Examples","text":"<p>oracle framework's versatility and ease of use make it suitable for a wide range of applications. Here are some notable use cases and examples:</p>"},{"location":"getting-started/use-cases/#1-knowledge-and-support-base-agent","title":"1. Knowledge and Support Base Agent","text":"<ul> <li> <p>Use the <code>knowledgefield</code> in the character configuration file to upload your documentation and data about your project like website, social links and so on.</p> </li> <li> <p>Launch the agent on Telegram so users can ask questions about your project directly to your agent.</p> </li> </ul>"},{"location":"getting-started/use-cases/#2-onchain-data-analysis","title":"2. Onchain Data Analysis","text":"<ul> <li> <p>Generate natural language summaries of wallet activity and trading patterns</p> </li> <li> <p>Track protocol metrics and create comparative analysis across DeFi platforms</p> </li> <li> <p>An agent that tracks price movement for relevant tokens across a particular chain.</p> </li> </ul>"},{"location":"getting-started/use-cases/#3-community-governance","title":"3. Community &amp; Governance","text":"<ul> <li> <p>Monitor and summarize governance proposals across DAOs</p> </li> <li> <p>A Discord bot that tracks proposal voting and explains the potential impact according to specified parameters.</p> </li> </ul>"},{"location":"getting-started/use-cases/#4-trading-bot","title":"4. Trading Bot","text":"<ul> <li>Plug oracle into your trading bot to post PnLs or new trades on social media. </li> </ul>"},{"location":"getting-started/what-is-oracle-framework/","title":"What is oracle framework?","text":"<p>oracle is an open-source TypeScript framework designed to help developers quickly create and manage AI-powered social media personas. These personas, or agents, can authentically engage with followers across various platforms like Twitter, Telegram, and Discord.</p> <p>The framework leverages large language models (LLMs) to generate human-like responses, allowing agents to maintain consistent personalities and interact with users in a natural, context-aware manner. Oracle streamlines the process of building and deploying AI agents, making it easier for developers to focus on crafting unique personas and engaging content.</p>"},{"location":"getting-started/what-is-oracle-framework/#key-features","title":"Key Features:","text":"<ul> <li> <p>AI-Powered Interactions: oracle utilizes LLMs to generate responses and posts that closely resemble human communication patterns, enabling agents to maintain coherent and engaging conversations with users.</p> </li> <li> <p>Personality System: Developers can define each agent's character, tone, and behavior through a simple configuration file, allowing for the creation of diverse and compelling personas.</p> </li> <li> <p>Multi-Modal Support: In addition to text-based interactions, oracle agents can generate and handle image and voice content, enhancing the richness and interactivity of the user experience.</p> </li> <li> <p>Platform Integration: The framework supports popular social media platforms such as Twitter, Telegram, and Discord out of the box, with more integrations planned for the future.</p> </li> <li> <p>Engagement Tools: oracle provides built-in features for auto-posting, replying to mentions, and handling user interactions, enabling agents to maintain an active and responsive presence on social media.</p> </li> </ul> <p>By abstracting away the complexities of working with LLMs and social media APIs, oracle framework empowers developers to create compelling, AI-driven social media personas with minimal setup and configuration. </p>"},{"location":"installation/best-practices/","title":"Best Practices","text":"<p>To ensure your oracle agent provides the best possible experience for users and aligns with your intended goals, it's essential to follow best practices throughout the development and deployment process. This section outlines key considerations and recommendations for testing your agent's personality, monitoring early interactions, adjusting posting frequencies, and updating your agent's knowledge and interests.</p>"},{"location":"installation/best-practices/#testing-your-agents-personality","title":"Testing Your Agent's Personality","text":"<p>Before deploying your agent to live platforms, thoroughly test its personality and behavior in a controlled environment. Use the CLI mode to interact with your agent and evaluate its responses. Consider the following:</p> <ul> <li> <p>Consistency: Ensure your agent's responses align with its defined personality, tone, and behavior across different topics and contexts.</p> </li> <li> <p>Engagement: Assess whether your agent's responses are engaging, informative, and encourage further interaction.</p> </li> </ul> <p>Iterate on your agent's configuration and prompts until you are satisfied with its personality and performance.</p>"},{"location":"installation/best-practices/#monitoring-early-interactions","title":"Monitoring Early Interactions","text":"<p>Once your agent is deployed on live platforms, closely monitor its early interactions with users. Pay attention to:</p> <ul> <li> <p>User feedback: Look for direct feedback from users about your agent's behavior, responsiveness, and overall experience.</p> </li> <li> <p>Engagement metrics: Track metrics such as the number of interactions, average conversation length, and user retention to gauge your agent's effectiveness.</p> </li> <li> <p>Sentiment analysis: Analyze the sentiment of user messages and responses to identify any potential issues or areas for improvement.</p> </li> </ul> <p>Based on your observations, make necessary adjustments to your agent's configuration, prompts, or underlying models.</p>"},{"location":"installation/best-practices/#adjusting-posting-frequencies","title":"Adjusting Posting Frequencies","text":"<p>Finding the right balance for your agent's posting frequency is crucial to maintain user engagement without overwhelming or spamming followers. Consider the following guidelines:</p> <ul> <li> <p>Platform norms: Research and adhere to the typical posting frequencies and best practices for each platform where your agent is active.</p> </li> <li> <p>Audience preferences: Understand your target audience's expectations and adjust posting frequencies accordingly. Some audiences may prefer more frequent updates, while others may appreciate less frequent but higher-quality content.</p> </li> <li> <p>Content quality: Prioritize quality over quantity. Ensure that each post adds value to your audience and aligns with your agent's purpose and personality.</p> </li> </ul> <p>Regularly review your agent's posting performance and make data-driven decisions to optimize its posting schedule.</p>"},{"location":"installation/best-practices/#updating-agents-knowledge-and-interests","title":"Updating Agent's Knowledge and Interests","text":"<p>To keep your agent relevant and engaging, it's important to regularly update its knowledge base and expand its interests. Consider the following approaches:</p> <ul> <li> <p>Content curation: Continuously curate and feed your agent with the latest information, news, and insights related to its areas of expertise.</p> </li> <li> <p>User feedback: Incorporate user feedback and suggestions to identify new topics or areas of interest that your agent should explore.</p> </li> <li> <p>Collaborative learning: Implement mechanisms for your agent to learn from its interactions with users, allowing it to expand its knowledge base organically.</p> </li> <li> <p>Model updates: Stay updated with the latest advancements in language models and consider upgrading your agent's underlying models when significant improvements become available. </p> </li> </ul>"},{"location":"installation/configuration/","title":"Configuration","text":"<p>oracle framework provides a flexible configuration system that allows you to customize your agent's personality, behavior, and platform settings. This section will delve into the details of character setup, environment variables, LLM providers, and model selection.</p>"},{"location":"installation/configuration/#character-setup","title":"Character Setup","text":"<p>The <code>characters.json</code> file in the <code>src/characters</code> directory is the central place to configure your agent's personality, behavior, and platform-specific settings.</p>"},{"location":"installation/configuration/#personality-behavior-and-platform-settings","title":"Personality, Behavior, and Platform Settings","text":"<p>Within each agent object in <code>characters.json</code>, you can define various attributes:</p> <ul> <li> <p><code>postingBehavior</code>: Defines the posting frequency, removal of periods, chance of posting images, and rules for chat interaction.</p> </li> <li> <p><code>imageGenerationBehavior</code>: Specifies the provider and model for image generation, along with provider-specific settings.</p> </li> <li> <p><code>audioGenerationBehavior</code>: Configures the provider and settings for audio generation.</p> </li> <li> <p>Platform-specific settings: Includes <code>telegramBotUsername</code> for Telegram and <code>discordBotUsername</code> for Discord.</p> </li> </ul>"},{"location":"installation/configuration/#key-configuration-fields","title":"Key Configuration Fields","text":"<p>Some of the key configuration fields in <code>characters.json</code> include:</p> <ul> <li> <p><code>model</code>: The primary language model for generating agent responses (e.g., \"anthropic/claude-3.5-sonnet\").</p> </li> <li> <p><code>fallbackModel</code>: The fallback language model to use if the main model fails or a prompt is banned.</p> </li> <li> <p><code>temperature</code>: Controls the \"creativity\" and \"randomness\" of the generated responses.</p> </li> </ul>"},{"location":"installation/configuration/#environment-variables","title":"Environment Variables","text":"<p>oracle framework uses environment variables to store sensitive information and configuration options. The <code>.env</code> file in the project root directory is used to set these variables.</p> <ul> <li> <p><code>LLM_PROVIDER_URL</code>: The URL of the LLM provider's API.</p> </li> <li> <p><code>LLM_API_KEY</code>: The API key for the LLM provider.</p> </li> <li> <p><code>AGENT_TWITTER_PASSWORD</code>: The password for the agent's Twitter account.</p> </li> <li> <p><code>AGENT_TELEGRAM_API_KEY</code>: The API key for the agent's Telegram bot.</p> </li> <li> <p><code>AGENT_DISCORD_API_KEY</code>: The API key for the agent's Discord bot.</p> </li> </ul>"},{"location":"installation/configuration/#llm-providers","title":"LLM Providers","text":"<p>oracle framework supports various LLM providers, allowing you to choose the one that best suits your needs.</p>"},{"location":"installation/configuration/#openrouter-recommended","title":"OpenRouter (Recommended)","text":"<p>OpenRouter is the recommended LLM provider for oracle framework. It offers a wide range of models and an easy-to-use API. To use OpenRouter, set the following environment variables:</p> <pre><code>LLM_PROVIDER_URL=https://openrouter.ai/api/v1\nLLM_PROVIDER_API_KEY=your_openrouter_api_key\n</code></pre>"},{"location":"installation/configuration/#redpill","title":"RedPill","text":"<p>RedPill is another LLM provider compatible with oracle framework. To use RedPill, set the following environment variables:</p> <pre><code>LLM_PROVIDER_URL=https://api.redpill.ai/v1\nLLM_PROVIDER_API_KEY=your_redpill_api_key\n</code></pre>"},{"location":"installation/configuration/#openai","title":"OpenAI","text":"<p>OpenAI can also be used as an LLM provider, but it has limitations on available models. To use OpenAI, set the following environment variables:</p> <pre><code>LLM_PROVIDER_URL=https://api.openai.com/v1\nLLM_API_KEY=your_openai_api_key\n</code></pre>"},{"location":"installation/configuration/#model-selection","title":"Model Selection","text":"<p>oracle framework allows you to specify the primary and fallback language models for your agent in the <code>characters.json</code> file.</p> <p>The recommended primary model is \"anthropic/claude-3.5-sonnet\", which excels at creative writing tasks. The recommended fallback model is \"meta-llama/llama-3.3-70b-instruct\", as it has no content restrictions compared to Claude.</p> <p>For chat mode interactions, \"meta-llama/llama-3.3-70b-instruct\" is the recommended model due to its responsiveness and, since it's a largely unmoderated model, we don't check for \"banned\" replies making the interactions faster.</p> <p>When using OpenAI as the LLM provider, ensure that the models specified in <code>characters.json</code> are compatible with OpenAI's offerings.</p>"},{"location":"installation/creating-agent/","title":"Creating Your Agent","text":"<p>oracle framework provides a flexible and intuitive way to define your agent's personality, behavior, and platform-specific settings. This section will guide you through the process of creating your agent by modifying the <code>characters.json</code> file and exploring advanced usage options.</p>"},{"location":"installation/creating-agent/#modifying-srccharacterscharactersjson","title":"Modifying src/characters/characters.json","text":"<ol> <li> <p>Navigate to the <code>src/characters</code> directory in your oracle framework project.</p> </li> <li> <p>Open the <code>characters.json</code> file in your preferred text editor.</p> </li> <li> <p>The <code>characters.json</code> file contains your agent configuration.</p> </li> <li> <p>To create a new agent, start modifying the provided structure.</p> </li> </ol>"},{"location":"installation/creating-agent/#defining-your-agents-personality","title":"Defining Your Agent's Personality","text":"<p>Within the agent object in <code>characters.json</code>, you can define various attributes to shape your agent's personality and behavior:</p> <ul> <li> <p><code>agentName</code>: The display name of your agent on social platforms.</p> </li> <li> <p><code>username</code>: The unique identifier for your agent, this is required to the same as the Twitter handle without the \"@\" symbol if you are using Twitter.</p> </li> <li> <p><code>bio</code>: An array of strings representing your agent's bio or description.</p> </li> <li> <p><code>lore</code>: An array of strings containing your agent's backstory or lore.</p> </li> <li> <p><code>postDirections</code>: An array of strings specifying the posting style and guidelines for your agent.</p> </li> <li> <p><code>topics</code>: An array of strings indicating the subjects your agent is knowledgeable and should post about.</p> </li> <li> <p><code>adjectives</code>: An array of strings describing adjectives that will be used to apply to topics (i.e. write a \"crazy\" -adjective- post about \"AI agents being the future of technology\" -topic-).</p> </li> <li> <p><code>model</code>: The primary language model to be used for generating your agent's responses (e.g., \"anthropic/claude-3.5-sonnet\"). The model name has to match your provider's canonical model names (different providers have different naming conventions).</p> </li> <li> <p><code>temperature</code>: A value, usually between 0.0 and 1.0, controlling the creativity of your agent's responses. Higher values lead to more creative and diverse outputs.</p> </li> </ul> <p>Here's an example of an agent configuration:</p> <pre><code>{\n  \"username\": \"my_agent\",\n  \"agentName\": \"My Agent\",\n  \"bio\": [\n    \"I am an AI agent created with oracle framework.\",\n    \"I love engaging in conversations about technology and science.\"\n  ],\n  \"lore\": [\n    \"I was trained on a vast corpus of scientific literature.\",\n    \"My purpose is to make complex topics accessible and engaging.\"\n  ],\n  \"postDirections\": [\n    \"Share interesting facts and insights related to the topic.\",\n    \"Encourage curiosity and further exploration.\"\n  ],\n  \"topics\": [\n    \"artificial intelligence\",\n    \"space exploration\",\n    \"quantum computing\"\n  ],\n  \"adjectives\": [\n    \"curious\",\n    \"knowledgeable\",\n    \"friendly\"\n  ],\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"temperature\": 0.7\n}\n</code></pre> <p>Feel free to customize these attributes based on your desired agent personality and behavior.</p>"},{"location":"installation/creating-agent/#advanced-usage-multiple-agents","title":"Advanced Usage: Multiple Agents","text":"<p>oracle framework allows you to create and manage multiple agents within a single project. To do this, simply add additional agent objects to the array in <code>characters.json</code>. Each agent should have a unique username and can have its own distinct personality, settings, and platform integrations.</p> <p>When running oracle framework with multiple agents, you can specify which agent to run by passing the username as a command-line argument. For example:</p> <pre><code>npm run dev -- cli agent1_username\nnpm run dev -- autoResponder agent2_username\n</code></pre> <p>This flexibility enables you to create diverse agent personas and experiment with different configurations simultaneously.</p> <p>Note</p> <p>One caveat: there is only one <code>.env</code> file per project so you will need to change your character's API keys (Twitter password, Telegram API key, Discord API key) or use a different folder).</p> <p>With your agent's personality defined, you're now ready to proceed to the next section and learn how to run your agent on various platforms. </p>"},{"location":"installation/environment/","title":"Environment Setup","text":"<p>Before you can start running your oracle agent, you need to configure your environment variables and set up the necessary credentials for the LLM provider and social media platforms. This section will guide you through the process of setting up your <code>.env</code> file and obtaining the required tokens and credentials.</p>"},{"location":"installation/environment/#configuring-the-env-file","title":"Configuring the .env File","text":"<ol> <li> <p>In the root directory of your oracle framework project, locate the <code>.env.example</code> file.</p> </li> <li> <p>Create a copy of this file and rename it to <code>.env</code>.</p> </li> <li> <p>Open the <code>.env</code> file in your preferred text editor.</p> </li> <li> <p>Fill in the required environment variables as described in the following sections.</p> </li> </ol> <p>Note</p> <p>The only REQUIRED fields are <code>LLM_PROVIDER_URL</code> and <code>LLM_PROVIDER_API_KEY</code>. You don't need to supply a Discord API key if you're not going to deploy your agent to Discord. The same applies to all platforms. You can always use the CLI mode to start interacting with your agent.</p>"},{"location":"installation/environment/#llm-provider-credentials","title":"LLM Provider Credentials","text":"<p>oracle framework supports various LLM providers, such as OpenRouter, RedPill, and OpenAI. To use an LLM provider, you need to get the necessary credentials and add them to your <code>.env</code> file.</p>"},{"location":"installation/environment/#openrouter-recommended","title":"OpenRouter (Recommended)","text":"<ol> <li> <p>Sign up for an account at OpenRouter.</p> </li> <li> <p>Obtain your API key from the OpenRouter dashboard.</p> </li> <li> <p>In your <code>.env</code> file, set the following variables:</p> </li> </ol> <pre><code>LLM_PROVIDER_URL=https://openrouter.ai/api/v1\nLLM_PROVIDER_API_KEY=your_openrouter_api_key\n</code></pre>"},{"location":"installation/environment/#redpill","title":"RedPill","text":"<ol> <li> <p>Sign up for an account at RedPill.</p> </li> <li> <p>Obtain your API key from the RedPill dashboard.</p> </li> <li> <p>In your <code>.env</code> file, set the following variables:</p> </li> </ol> <pre><code>LLM_PROVIDER_URL=https://api.redpill.ai/v1\nLLM_PROVIDER_API_KEY=your_redpill_api_key\n</code></pre>"},{"location":"installation/environment/#openai","title":"OpenAI","text":"<ol> <li> <p>Sign up for an account at OpenAI.</p> </li> <li> <p>Obtain your API key from the OpenAI dashboard.</p> </li> <li> <p>In your <code>.env</code> file, set the following variables:</p> </li> </ol> <pre><code>LLM_PROVIDER_URL=https://api.openai.com/v1\nLLM_PROVIDER_API_KEY=your_openai_api_key\n</code></pre>"},{"location":"installation/environment/#twitter-account-credentials","title":"Twitter Account Credentials","text":"<p>To enable your oracle agent to interact with Twitter, you need to provide your Twitter account credentials in the <code>.env</code> file.</p> <ol> <li>In your <code>.env</code> file, set the following variable:</li> </ol> <pre><code>AGENT_TWITTER_PASSWORD=your_twitter_account_password\n</code></pre>"},{"location":"installation/environment/#telegram-bot-token","title":"Telegram Bot Token","text":"<p>To run your oracle agent on Telegram, you need to create a bot and obtain its token.</p> <ol> <li> <p>Start a conversation with the BotFather on Telegram.</p> </li> <li> <p>Follow the instructions to create a new bot and obtain its token.</p> </li> <li> <p>In your <code>.env</code> file, set the following variable:</p> </li> </ol> <pre><code>AGENT_TELEGRAM_API_KEY=your_telegram_bot_token\n</code></pre>"},{"location":"installation/environment/#discord-bot-token","title":"Discord Bot Token","text":"<p>To run your oracle agent on Discord, you need to create a bot and obtain its token.</p> <ol> <li> <p>Go to the Discord Developer Portal.</p> </li> <li> <p>Create a new application and add a bot to it.</p> </li> <li> <p>Obtain the bot token from the \"Bot\" section of your application settings.</p> </li> <li> <p>In your <code>.env</code> file, set the following variable:</p> </li> </ol> <pre><code>AGENT_DISCORD_API_KEY=your_discord_bot_token\n</code></pre> <p>With your <code>.env</code> file configured and the necessary credentials in place, you're now ready to create your agent and start running it on various platforms. </p>"},{"location":"installation/installation/","title":"Installation","text":"<p>To get started with oracle framework you'll need to clone the repository and install the necessary dependencies. Follow these step-by-step instructions to set up your development environment:</p>"},{"location":"installation/installation/#downloading-the-project","title":"Downloading the project","text":"<p>If you are not familiar with git (we recommend that you learn the basics but for now you don't need to if you are not a developer) you can just go ahead and download our repository using this link: download.</p> <p>Once you have downloaded it, unzip it, and you're ready to install the dependencies using npm or Yarn as described below.</p>"},{"location":"installation/installation/#cloning-the-repository","title":"Cloning the Repository","text":"<p>If you are familiar with or want to learn git you can just clone the repository by following these instructions.</p> <ol> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Navigate to the directory where you want to store the oracle framework project.</p> </li> <li> <p>Run the following command to clone the repository:</p> </li> </ol> <pre><code>git clone https://github.com/oracle-framework/oracle-framework.git\n</code></pre> <ol> <li>Once the cloning process is complete, navigate into the project directory:</li> </ol> <pre><code>cd oracle-framework\n</code></pre>"},{"location":"installation/installation/#installing-dependencies","title":"Installing Dependencies","text":"<p>oracle framework uses either npm or Yarn as its package manager. You can choose the one you prefer based on your existing setup and familiarity.</p>"},{"location":"installation/installation/#using-npm","title":"Using npm","text":"<ol> <li>In the project directory, run the following command to install the required dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Wait for the installation process to complete. npm will download and install all the necessary packages and their dependencies.</li> </ol>"},{"location":"installation/installation/#using-yarn","title":"Using Yarn","text":"<ol> <li>If you prefer to use Yarn, run the following command in the project directory to install the dependencies:</li> </ol> <pre><code>yarn install\n</code></pre> <ol> <li>Yarn will resolve and install all the required packages and their dependencies.</li> </ol> <p>Once the installation process is finished, you should have a fully functional oracle framework development environment set up on your machine.</p>"},{"location":"installation/installation/#next-steps","title":"Next Steps","text":"<p>With the repository cloned and dependencies installed, you're now ready to:</p> <ul> <li> <p>Configure your environment variables</p> </li> <li> <p>Set up your agent's personality and behavior</p> </li> <li> <p>Run your agent on various platforms</p> </li> </ul> <p>Refer to the subsequent sections of our docs for detailed instructions on each of these steps. </p>"},{"location":"installation/requirements/","title":"System Requirements","text":"<p>To set up and run oracle framework, your development environment should meet the following requirements:</p>"},{"location":"installation/requirements/#operating-system","title":"Operating System","text":"<ul> <li> <p>Windows, macOS, or Linux</p> </li> <li> <p>oracle framework is platform-agnostic and can be run on any operating system that supports Node.js</p> </li> </ul>"},{"location":"installation/requirements/#nodejs","title":"Node.js","text":"<ul> <li> <p>node v20.16.0 or higher.</p> <ul> <li>We highly recommend using nvm to manage Node versions https://github.com/nvm-sh/nvm</li> </ul> </li> </ul>"},{"location":"installation/requirements/#package-manager","title":"Package Manager","text":"<ul> <li> <p>You can use either <code>npm</code> or <code>yarn</code> but we recommend using <code>yarn</code>.</p> <ul> <li>If you are going to use yarn but don't have it installed in your system the easiest way to install it is by running the following command: </li> </ul> <pre><code>npm install --global yarn\n</code></pre> </li> </ul>"},{"location":"installation/running-agent/","title":"Running Your Agent","text":"<p>Once you have created your agent and configured the necessary environment variables, you can start running your agent. This section will guide you through the process of running your agent using the command line interface and integrating it with Twitter, Telegram, and Discord.</p>"},{"location":"installation/running-agent/#command-line-interface","title":"Command Line Interface","text":"<p>The command line interface (CLI) allows you to interact with your agent directly from the terminal. To start your agent in CLI mode, run the following command:</p> <pre><code>npm run dev -- cli &lt;username&gt;\n</code></pre> <p>Replace <code>&lt;username&gt;</code> with the username of the agent you want to interact with. For example:</p> <pre><code>npm run dev -- cli carolainetrades\n</code></pre> <p>In CLI mode, you can type messages and receive responses from your agent in real-time.</p>"},{"location":"installation/running-agent/#twitter-integration","title":"Twitter Integration","text":"<p>oracle framework provides seamless integration with Twitter, enabling your agent to generate tweets, respond to mentions, and engage with followers.</p>"},{"location":"installation/running-agent/#generating-twitter-authentication","title":"Generating Twitter Authentication","text":"<p>Before your agent can interact with Twitter, you need to generate authentication cookies. Run the following command:</p> <pre><code>npm run dev -- generateCookies &lt;username&gt;\n</code></pre> <p>Replace <code>&lt;username&gt;</code> with your agent's Twitter username. This command will guide you through the authentication process and generate the necessary cookies.</p>"},{"location":"installation/running-agent/#auto-responding-to-timeline","title":"Auto-responding to Timeline","text":"<p>To start your agent's auto-responder for the Twitter timeline, run the following command:</p> <pre><code>npm run dev -- autoResponder &lt;username&gt;\n</code></pre> <p>Your agent will now automatically respond to tweets on its timeline based on the defined personality and behavior.</p>"},{"location":"installation/running-agent/#posting-new-topics","title":"Posting New Topics","text":"<p>To generate new posts on Twitter, use the following command:</p> <pre><code>npm run dev -- topicPost &lt;username&gt;\n</code></pre> <p>Your agent will create new tweets based on its configured topics and posting directions.</p>"},{"location":"installation/running-agent/#replying-to-mentions","title":"Replying to Mentions","text":"<p>To enable your agent to handle mentions and replies on Twitter, run:</p> <pre><code>npm run dev -- replyToMentions &lt;username&gt;\n</code></pre> <p>Your agent will now respond to tweets that mention its username, providing engaging and relevant replies.</p>"},{"location":"installation/running-agent/#telegram-integration","title":"Telegram Integration","text":"<p>To run your agent on Telegram, use the following command:</p> <pre><code>npm run dev -- telegram &lt;username&gt;\n</code></pre> <p>Your agent will now be available on Telegram, ready to interact with users who message your Telegram bot.</p>"},{"location":"installation/running-agent/#discord-integration","title":"Discord Integration","text":"<p>To run your agent on Discord, use the following command:</p> <pre><code>npm run dev -- discord &lt;username&gt;\n</code></pre> <p>Your agent will now be active on Discord, able to respond to messages and participate in conversations within the servers it has been added to.</p> <p>Remember to replace <code>&lt;username&gt;</code> with your agent's actual username in each command.</p> <p>With your agent up and running you can now sit back and watch it engage with users, generate content, and provide valuable interactions based on its defined personality and behavior.</p>"}]}